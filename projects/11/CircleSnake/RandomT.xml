<tokens> 
<keyword> class </keyword>
<identifier> Random </identifier>
<symbol> { </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> seed </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> calledTime </identifier>
<symbol> ; </symbol>
<keyword> constructor </keyword>
<identifier> Random </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> seedIn </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> seed </identifier>
<symbol> = </symbol>
<identifier> seedIn </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> seed </identifier>
<symbol> = </symbol>
<identifier> rand </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> calledTime </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> this </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> rand </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> seed </identifier>
<symbol> = </symbol>
<identifier> seed </identifier>
<symbol> + </symbol>
<integerConstant> 20251 </integerConstant>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> seed </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> seed </identifier>
<symbol> = </symbol>
<identifier> seed </identifier>
<symbol> - </symbol>
<integerConstant> 32767 </integerConstant>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<identifier> seed </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> randRange </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> range </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> mask </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> ret </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> mask </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> mask </identifier>
<symbol> &lt; </symbol>
<identifier> range </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> mask </identifier>
<symbol> = </symbol>
<identifier> mask </identifier>
<symbol> * </symbol>
<integerConstant> 2 </integerConstant>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> ret </identifier>
<symbol> = </symbol>
<identifier> rand </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<identifier> mask </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> calledTime </identifier>
<symbol> = </symbol>
<identifier> calledTime </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> ret </identifier>
<symbol> &gt; </symbol>
<identifier> range </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> ret </identifier>
<symbol> = </symbol>
<identifier> rand </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<identifier> mask </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> calledTime </identifier>
<symbol> = </symbol>
<identifier> calledTime </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> ret </identifier>
<symbol> = </symbol>
<identifier> ret </identifier>
<symbol> &amp; </symbol>
<identifier> getShift </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<identifier> ret </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> getShift </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> temp </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> calledTime </identifier>
<symbol> = </symbol>
<identifier> calledTime </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> temp </identifier>
<symbol> = </symbol>
<identifier> calledTime </identifier>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> temp </identifier>
<symbol> &gt; </symbol>
<integerConstant> 9 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> temp </identifier>
<symbol> = </symbol>
<identifier> temp </identifier>
<symbol> - </symbol>
<integerConstant> 9 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<identifier> temp </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> deAlloc </identifier>
<symbol> ( </symbol>
<keyword> this </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> addCallTime </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> times </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> calledTime </identifier>
<symbol> = </symbol>
<identifier> calledTime </identifier>
<symbol> + </symbol>
<identifier> times </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
 </tokens>
