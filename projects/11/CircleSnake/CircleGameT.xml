<tokens> 
<keyword> class </keyword>
<identifier> CircleGame </identifier>
<symbol> { </symbol>
<keyword> field </keyword>
<identifier> Circle </identifier>
<identifier> circle </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> direction </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<identifier> Shrink </identifier>
<identifier> shrink </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> y </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> location </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<identifier> Random </identifier>
<identifier> rand </identifier>
<symbol> ; </symbol>
<keyword> constructor </keyword>
<identifier> CircleGame </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> circle </identifier>
<symbol> = </symbol>
<identifier> Circle </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 50 </integerConstant>
<symbol> , </symbol>
<integerConstant> 50 </integerConstant>
<symbol> , </symbol>
<integerConstant> 12 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> rand </identifier>
<symbol> = </symbol>
<identifier> Random </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 50 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> rand </identifier>
<symbol> . </symbol>
<identifier> randRange </identifier>
<symbol> ( </symbol>
<integerConstant> 500 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> y </identifier>
<symbol> = </symbol>
<identifier> rand </identifier>
<symbol> . </symbol>
<identifier> randRange </identifier>
<symbol> ( </symbol>
<integerConstant> 242 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> shrink </identifier>
<symbol> = </symbol>
<identifier> Shrink </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> this </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> boolean </keyword>
<identifier> eatShrink </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> 	if </identifier>
<symbol> ( </symbol>
<identifier> isInCircle </identifier>
<symbol> ( </symbol>
<identifier> shrink </identifier>
<symbol> . </symbol>
<identifier> get_X </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> , </symbol>
<identifier> shrink </identifier>
<symbol> . </symbol>
<identifier> get_Y </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> 	if </identifier>
<symbol> ( </symbol>
<identifier> isInCircle </identifier>
<symbol> ( </symbol>
<identifier> shrink </identifier>
<symbol> . </symbol>
<identifier> get_X </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> + </symbol>
<integerConstant> 10 </integerConstant>
<symbol> , </symbol>
<identifier> shrink </identifier>
<symbol> . </symbol>
<identifier> get_Y </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> 	if </identifier>
<symbol> ( </symbol>
<identifier> isInCircle </identifier>
<symbol> ( </symbol>
<identifier> shrink </identifier>
<symbol> . </symbol>
<identifier> get_X </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> , </symbol>
<identifier> shrink </identifier>
<symbol> . </symbol>
<identifier> get_Y </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> + </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> 	if </identifier>
<symbol> ( </symbol>
<identifier> isInCircle </identifier>
<symbol> ( </symbol>
<identifier> shrink </identifier>
<symbol> . </symbol>
<identifier> get_X </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> + </symbol>
<integerConstant> 10 </integerConstant>
<symbol> , </symbol>
<identifier> shrink </identifier>
<symbol> . </symbol>
<identifier> get_Y </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> + </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> 	return </identifier>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> boolean </keyword>
<identifier> isInCircle </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> input_x </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> input_y </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> 	var </identifier>
<keyword> int </keyword>
<identifier> x_diff </identifier>
<symbol> ; </symbol>
<identifier> 	var </identifier>
<keyword> int </keyword>
<identifier> y_diff </identifier>
<symbol> ; </symbol>
<identifier> 	var </identifier>
<keyword> int </keyword>
<identifier> radius </identifier>
<symbol> ; </symbol>
<identifier> 	var </identifier>
<keyword> int </keyword>
<identifier> diff </identifier>
<symbol> ; </symbol>
<identifier> 	var </identifier>
<keyword> int </keyword>
<identifier> rad_pow </identifier>
<symbol> ; </symbol>
<identifier> 	let </identifier>
<identifier> x_diff </identifier>
<symbol> = </symbol>
<identifier> input_x </identifier>
<symbol> - </symbol>
<identifier> circle </identifier>
<symbol> . </symbol>
<identifier> get_X </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> 	let </identifier>
<identifier> y_diff </identifier>
<symbol> = </symbol>
<identifier> input_y </identifier>
<symbol> - </symbol>
<identifier> circle </identifier>
<symbol> . </symbol>
<identifier> get_Y </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> 	let </identifier>
<identifier> radius </identifier>
<symbol> = </symbol>
<identifier> circle </identifier>
<symbol> . </symbol>
<identifier> get_radius </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> 	let </identifier>
<identifier> diff </identifier>
<symbol> = </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> multiply </identifier>
<symbol> ( </symbol>
<identifier> x_diff </identifier>
<symbol> , </symbol>
<identifier> x_diff </identifier>
<symbol> ) </symbol>
<symbol> + </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> multiply </identifier>
<symbol> ( </symbol>
<identifier> y_diff </identifier>
<symbol> , </symbol>
<identifier> y_diff </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> 	let </identifier>
<identifier> rad_pow </identifier>
<symbol> = </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> multiply </identifier>
<symbol> ( </symbol>
<identifier> radius </identifier>
<symbol> , </symbol>
<identifier> radius </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> 	if </identifier>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> diff </identifier>
<symbol> &gt; </symbol>
<identifier> rad_pow </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> 	return </identifier>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> circle </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> deAlloc </identifier>
<symbol> ( </symbol>
<keyword> this </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> movecircle </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> circle </identifier>
<symbol> . </symbol>
<identifier> moveUp </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> circle </identifier>
<symbol> . </symbol>
<identifier> moveDown </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> circle </identifier>
<symbol> . </symbol>
<identifier> moveLeft </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> circle </identifier>
<symbol> . </symbol>
<identifier> moveRight </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> Sys </identifier>
<symbol> . </symbol>
<identifier> wait </identifier>
<symbol> ( </symbol>
<integerConstant> 12 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> afterEat </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> Cx </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> Cy </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> Cradius </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> flag </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> limit1 </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> limit2 </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> limit3 </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> limit4 </identifier>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> circle </identifier>
<symbol> . </symbol>
<identifier> incSize </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> shrink </identifier>
<symbol> . </symbol>
<identifier> erase </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> Cx </identifier>
<symbol> = </symbol>
<identifier> circle </identifier>
<symbol> . </symbol>
<identifier> get_X </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> Cy </identifier>
<symbol> = </symbol>
<identifier> circle </identifier>
<symbol> . </symbol>
<identifier> get_Y </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> Cradius </identifier>
<symbol> = </symbol>
<identifier> circle </identifier>
<symbol> . </symbol>
<identifier> get_radius </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> circle </identifier>
<symbol> = </symbol>
<identifier> Circle </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> Cx </identifier>
<symbol> , </symbol>
<identifier> Cy </identifier>
<symbol> , </symbol>
<identifier> Cradius </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> circle </identifier>
<symbol> . </symbol>
<identifier> get_X </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> &lt; </symbol>
<integerConstant> 200 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> limit1 </identifier>
<symbol> = </symbol>
<identifier> circle </identifier>
<symbol> . </symbol>
<identifier> get_X </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> - </symbol>
<integerConstant> 50 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> 	else </identifier>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> limit1 </identifier>
<symbol> = </symbol>
<integerConstant> 100 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> circle </identifier>
<symbol> . </symbol>
<identifier> get_X </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> &gt; </symbol>
<integerConstant> 310 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> limit2 </identifier>
<symbol> = </symbol>
<integerConstant> 510 </integerConstant>
<symbol> - </symbol>
<identifier> circle </identifier>
<symbol> . </symbol>
<identifier> get_X </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> - </symbol>
<integerConstant> 50 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> 	else </identifier>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> limit2 </identifier>
<symbol> = </symbol>
<integerConstant> 100 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> circle </identifier>
<symbol> . </symbol>
<identifier> get_Y </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> &lt; </symbol>
<integerConstant> 100 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> limit3 </identifier>
<symbol> = </symbol>
<identifier> circle </identifier>
<symbol> . </symbol>
<identifier> get_Y </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> - </symbol>
<integerConstant> 25 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> 	else </identifier>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> limit3 </identifier>
<symbol> = </symbol>
<integerConstant> 100 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> circle </identifier>
<symbol> . </symbol>
<identifier> get_Y </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> &gt; </symbol>
<integerConstant> 154 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> limit4 </identifier>
<symbol> = </symbol>
<integerConstant> 254 </integerConstant>
<symbol> - </symbol>
<identifier> circle </identifier>
<symbol> . </symbol>
<identifier> get_Y </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> - </symbol>
<integerConstant> 25 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> 	else </identifier>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> limit4 </identifier>
<symbol> = </symbol>
<integerConstant> 100 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> flag </identifier>
<symbol> = </symbol>
<identifier> rand </identifier>
<symbol> . </symbol>
<identifier> randRange </identifier>
<symbol> ( </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> flag </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> circle </identifier>
<symbol> . </symbol>
<identifier> get_X </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> + </symbol>
<identifier> rand </identifier>
<symbol> . </symbol>
<identifier> randRange </identifier>
<symbol> ( </symbol>
<identifier> limit2 </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> circle </identifier>
<symbol> . </symbol>
<identifier> get_X </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> - </symbol>
<identifier> rand </identifier>
<symbol> . </symbol>
<identifier> randRange </identifier>
<symbol> ( </symbol>
<identifier> limit1 </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> flag </identifier>
<symbol> = </symbol>
<identifier> rand </identifier>
<symbol> . </symbol>
<identifier> randRange </identifier>
<symbol> ( </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> flag </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> y </identifier>
<symbol> = </symbol>
<identifier> circle </identifier>
<symbol> . </symbol>
<identifier> get_Y </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> + </symbol>
<identifier> rand </identifier>
<symbol> . </symbol>
<identifier> randRange </identifier>
<symbol> ( </symbol>
<identifier> limit4 </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> y </identifier>
<symbol> = </symbol>
<identifier> circle </identifier>
<symbol> . </symbol>
<identifier> get_Y </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> - </symbol>
<identifier> rand </identifier>
<symbol> . </symbol>
<identifier> randRange </identifier>
<symbol> ( </symbol>
<identifier> limit3 </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> shrink </identifier>
<symbol> = </symbol>
<identifier> Shrink </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<identifier> Array </identifier>
<identifier> run </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> char </keyword>
<identifier> key </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> boolean </keyword>
<identifier> exit </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> upCount </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> downCount </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> leftCount </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> rightCount </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> inlargeCount </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<identifier> Array </identifier>
<identifier> arr </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> upCount </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> downCount </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> leftCount </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> rightCount </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> inlargeCount </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> exit </identifier>
<symbol> = </symbol>
<keyword> false </keyword>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> arr </identifier>
<symbol> = </symbol>
<identifier> Array </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 6 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> arr </identifier>
<symbol> [ </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<identifier> exit </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> key </identifier>
<symbol> = </symbol>
<identifier> Keyboard </identifier>
<symbol> . </symbol>
<identifier> keyPressed </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> movecircle </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> circle </identifier>
<symbol> . </symbol>
<identifier> checkBoundries </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 140 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> exit </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 131 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> upCount </identifier>
<symbol> = </symbol>
<identifier> upCount </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 133 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> downCount </identifier>
<symbol> = </symbol>
<identifier> downCount </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 130 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> leftCount </identifier>
<symbol> = </symbol>
<identifier> leftCount </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 132 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> rightCount </identifier>
<symbol> = </symbol>
<identifier> rightCount </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> arr </identifier>
<symbol> [ </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> exit </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> key </identifier>
<symbol> = </symbol>
<identifier> Keyboard </identifier>
<symbol> . </symbol>
<identifier> keyPressed </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> movecircle </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> 		if </identifier>
<symbol> ( </symbol>
<identifier> eatShrink </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> afterEat </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> inlargeCount </identifier>
<symbol> = </symbol>
<identifier> inlargeCount </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> arr </identifier>
<symbol> [ </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> upCount </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> arr </identifier>
<symbol> [ </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> downCount </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> arr </identifier>
<symbol> [ </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> leftCount </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> arr </identifier>
<symbol> [ </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> rightCount </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> arr </identifier>
<symbol> [ </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> inlargeCount </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<identifier> arr </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
 </tokens>
